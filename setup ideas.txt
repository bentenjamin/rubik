need to use an xyz plane to find location of pieces within cube

cubie needs to store:
- colours
- piece type
- current location

whole cube needs to store all pieces

algorithm needs to use the human solving method.
- slot edge pieces into place relative to faces, use location of cubies to find the needed cubie and roatate it to be in the correct plane and move it from there.

idea: store cubies in a 3x3x3 array, indices -1 = xyz coords of each cubie, number stored inside array indaicates colours on each cubie

use matrices dot multiplication to rotate a face, and use the constant value (x, y or z) to find all the pieces in the face that need to be moved.


NB need to figure out how colours will be stored and relfect in rotations.

R G B
-1, 0, 1 -> cube
0, 1, 2 - indices

(0, 0, 1,
0, 1, 0,
-1, 0, 0) -> rotation matrix

dot multiplication

(1 + 0 + 0)(0 +0 + 0) (1 + 0 + 0) -> 1, 0, 1 
2 1 2 -> indices
temporary array or something like that

cubie class:
 init method
 number string representing colours
 string constant = cubie type

 cube class:
 init method
  all 26 cubies in 3x3x3 array
  in the correct starting order


  self.faces = (
            Piece(pos=RIGHT, colors=(cube_str[28], None, None)),
            Piece(pos=LEFT,  colors=(cube_str[22], None, None)),
            Piece(pos=UP,    colors=(None, cube_str[4],  None)),
            Piece(pos=DOWN,  colors=(None, cube_str[49], None)),
            Piece(pos=FRONT, colors=(None, None, cube_str[25])),
            Piece(pos=BACK,  colors=(None, None, cube_str[31])))
        self.edges = (
            Piece(pos=RIGHT + UP,    colors=(cube_str[16], cube_str[5], None)),
            Piece(pos=RIGHT + DOWN,  colors=(cube_str[40], cube_str[50], None)),
            Piece(pos=RIGHT + FRONT, colors=(cube_str[27], None, cube_str[26])),
            Piece(pos=RIGHT + BACK,  colors=(cube_str[29], None, cube_str[30])),
            Piece(pos=LEFT + UP,     colors=(cube_str[10], cube_str[3], None)),
            Piece(pos=LEFT + DOWN,   colors=(cube_str[34], cube_str[48], None)),
            Piece(pos=LEFT + FRONT,  colors=(cube_str[23], None, cube_str[24])),
            Piece(pos=LEFT + BACK,   colors=(cube_str[21], None, cube_str[32])),
            Piece(pos=UP + FRONT,    colors=(None, cube_str[7], cube_str[13])),
            Piece(pos=UP + BACK,     colors=(None, cube_str[1], cube_str[19])),
            Piece(pos=DOWN + FRONT,  colors=(None, cube_str[46], cube_str[37])),
            Piece(pos=DOWN + BACK,   colors=(None, cube_str[52], cube_str[43])),
        )
        self.corners = (
            Piece(pos=RIGHT + UP + FRONT,   colors=(cube_str[15], cube_str[8], cube_str[14])),
            Piece(pos=RIGHT + UP + BACK,    colors=(cube_str[17], cube_str[2], cube_str[18])),
            Piece(pos=RIGHT + DOWN + FRONT, colors=(cube_str[39], cube_str[47], cube_str[38])),
            Piece(pos=RIGHT + DOWN + BACK,  colors=(cube_str[41], cube_str[53], cube_str[42])),
            Piece(pos=LEFT + UP + FRONT,    colors=(cube_str[11], cube_str[6], cube_str[12])),
            Piece(pos=LEFT + UP + BACK,     colors=(cube_str[9], cube_str[0], cube_str[20])),
            Piece(pos=LEFT + DOWN + FRONT,  colors=(cube_str[35], cube_str[45], cube_str[36])),
            Piece(pos=LEFT + DOWN + BACK,   colors=(cube_str[33], cube_str[51], cube_str[44])),
        )

if x == 0: colours[1] == 3
if x == 2: colours[1] == 4
if y == 0:
if y == 2:
if z == 0:
if z == 2:

up - left - front - right - back - down -> order of string concatenation